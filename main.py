from dotenv import load_dotenv
import os

from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json
import time
import datetime

# Load the environment variables from .env file
load_dotenv()

ASTRA_DB_SECURE_CONNECT_BUNDLE = os.getenv("ASTRA_DB_SECURE_CONNECT_BUNDLE")
ASTRA_DB_TOKEN_FILE = os.getenv("ASTRA_DB_TOKEN_FILE")
ASTRA_DB_KEYSPACE = os.getenv("ASTRA_DB_KEYSPACE")
ASTRA_DB_TABLE = os.getenv("ASTRA_DB_TABLE")
num_operations_str = os.getenv("NUM_OPERATIONS", 100)

try:
    # Convert the property value to an integer
    num_operations = int(num_operations_str)
except ValueError:
    print("Property value is not a valid integer:", num_operations_str)

# This secure connect bundle is autogenerated when you donwload your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': ASTRA_DB_SECURE_CONNECT_BUNDLE
}

# This token json file is autogenerated when you donwload your token, 
# if yours is different update the file name below
with open(ASTRA_DB_TOKEN_FILE) as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

# Create the table if it doesn't exist
create_table_query = f"""
    CREATE TABLE IF NOT EXISTS {ASTRA_DB_KEYSPACE}.{ASTRA_DB_TABLE} (
        id INT PRIMARY KEY,
        value TEXT
    )
"""

session.execute(create_table_query)

# Prepare statements for read and write operations
read_statement = session.prepare(f"SELECT * FROM {ASTRA_DB_KEYSPACE}.{ASTRA_DB_TABLE} WHERE id = ?")
write_statement = session.prepare(f"INSERT INTO {ASTRA_DB_KEYSPACE}.{ASTRA_DB_TABLE} (id, value) VALUES (?, ?)")

current_time = datetime.datetime.now()
print(f"Loadtest with {num_operations} write and read operations started at {current_time}")
print()

# Perform write operations
write_start_time = time.time()
for i in range(num_operations):
    session.execute(write_statement, (i, f"value{i}"))
write_end_time = time.time()

# Perform read operations
read_start_time = time.time()
for i in range(num_operations):
    result = session.execute(read_statement, (i,))
read_end_time = time.time()

# Calculate average latencies
write_latency = (write_end_time - write_start_time) / num_operations
read_latency = (read_end_time - read_start_time) / num_operations

print(f"Average Write Latency: {write_latency:.6f} seconds")
print(f"Average Read Latency: {read_latency:.6f} seconds")

current_time = datetime.datetime.now()
print()
print(f"Loadtest finished at {current_time}")

# Close the Cassandra session and cluster connection
session.shutdown()
cluster.shutdown()
